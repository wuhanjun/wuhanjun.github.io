<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>吴晗君的博客</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 13 Mar 2019 20:00:41 +0800</pubDate>
    <lastBuildDate>Wed, 13 Mar 2019 20:00:41 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Welcome to W's Blog</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“css-loader源码 ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;相比较于style-loader、less-loader、file-loader，css-loader要处理&lt;code class=&quot;highlighter-rouge&quot;&gt;@import&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;url(src)&lt;/code&gt;的语法，所以较为繁琐一些。&lt;/p&gt;

&lt;p id=&quot;build&quot;&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;正文&quot;&gt;正文&lt;/h2&gt;

&lt;hr /&gt;
&lt;p&gt;从拿到的结果看，css-loader将&lt;code class=&quot;highlighter-rouge&quot;&gt;url('../images/favicon.png')&lt;/code&gt;这个操作解析为了两步。&lt;/p&gt;

&lt;p&gt;1.用require语法去解析图片，这样在打包时就生成一个新的模块：’./src/images/favicon.png’，导出的模块内容是图片名称&lt;/p&gt;

&lt;p&gt;2.webpack将require语法解析成自定义的__webpack_require__。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 解析前源=代码
body {
  background-color: red;
  background-image: url('../images/favicon.png')
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// css-loader返回的代码
return callback(null, runtimeCode + importCode + moduleCode + exportsCode)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 解析后的代码
./src/styles/index.css:

eval(&quot;
exports = module.exports = __webpack_require__(\&quot;./node_modules/_css-loader@2.1.0@css-loader/dist/runtime/api.js\&quot;)(false);\n

// Imports\n
var urlEscape = __webpack_require__(\&quot;./node_modules/_css-loader@2.1.0@css-loader/dist/runtime/url-escape.js\&quot;;\n

var ___CSS_LOADER_URL___0___ = urlEscape(__webpack_require__(/*! ../images/favicon.png */ \&quot;./src/images/favicon.png\&quot;));

\n\n
// Module\n
exports.push([
  module.i, 
  \&quot;/* @import './a.css'; */\\n
  body {\\n
    background-color: red;\\n
    background-image: url(\&quot; + ___CSS_LOADER_URL___0___ + \&quot;)\\n
  }\&quot;, \&quot;\&quot;
]);



./src/images/favicon.png:

eval(&quot;module.exports = __webpack_require__.p + \&quot;61e8d657aff2d3d4637b4d541d170e9c.png\&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 10 Mar 2019 05:06:00 +0800</pubDate>
        <link>http://localhost:4000/2019/03/10/css-loader/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/03/10/css-loader/</guid>
        
        <category>webpack</category>
        
        
      </item>
    
      <item>
        <title>Welcome to W's Blog</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;“Yeah It’s on. ”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;W 的 Blog 就这么开通了。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#build&quot;&gt;跳过废话，直接看记录的坑 &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;16年的博客因为收费关闭了，现在在github上开一个。&lt;/p&gt;

&lt;p&gt;刚开始自己吭哧吭哧写了页面，后来突然发现大家都是用jekyll之类的工具生成的，大家可以去fork一个，然后修改一下做成自己的，挺实用的，节省时间。&lt;/p&gt;

&lt;p&gt;比如这篇笔记，是用markdown写的，jekyll会帮你处理好模版引擎这些琐碎的事情。&lt;/p&gt;

&lt;p id=&quot;build&quot;&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;正文&quot;&gt;正文&lt;/h2&gt;

&lt;hr /&gt;
&lt;p&gt;接下来记一下搭建gitpage时遇到的问题&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;本地开发环境
    &lt;ol&gt;
      &lt;li&gt;注意点：公司的Gitlab和Github可以共用一个rsa，rsa只是Github放在本地机器的标识，用来证明这台电脑以后都可以直接操作远程仓库。这是&lt;a href=&quot;https://git-scm.com/book/zh/v1/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E7%94%9F%E6%88%90-SSH-%E5%85%AC%E9%92%A5&quot;&gt;整体流程&lt;/a&gt;。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;建立gitpage仓库时的注意点
    &lt;ol&gt;
      &lt;li&gt;如果你用的&lt;a href=&quot;https://pages.github.com/&quot;&gt;默认的&lt;/a&gt;方式搭建，那么gitpage仓库名为username.github.io，方式搭建，那么gitpage仓库名必须为username必须与你的Github账号完全一致。gh-pages的方式网上搜一下教程，很多。&lt;/li&gt;
      &lt;li&gt;仓库中的文件名不允许和其他仓库名相同，这样会导致你这个目录下的资源404。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一些建议&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;可以clone或者firk一份好看的gitpage，会节省很多时间。&lt;/li&gt;
  &lt;li&gt;而且，git clone的话，建议找好就开始。因为文件会比较大。&lt;/li&gt;
  &lt;li&gt;在你clone的时候，可以浏览&lt;a href=&quot;http://jekyllcn.com/&quot;&gt;jekyllen&lt;/a&gt;这个网站，先安装一下环境。操作很简单，没有几步，但是限于网速要很久。&lt;/li&gt;
  &lt;li&gt;之后，你可以大致翻阅一下文档，看看是怎么用的，然后对照着fork过来的目录理解就可以了。&lt;/li&gt;
  &lt;li&gt;等仓库clone到本地了，改一些个人的配置，例如首页图片、favicon、资源路径、_config.yml就能跑起来了。&lt;/li&gt;
  &lt;li&gt;你如果直接fork的我这份模版，npm run watch就能在本地调好后上传了。&lt;/li&gt;
  &lt;li&gt;Year~&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;后记&quot;&gt;后记&lt;/h2&gt;

&lt;p&gt;可以去&lt;a href=&quot;https://github.com/huxpro&quot;&gt;原作者仓库&lt;/a&gt;那里点个赞😄&lt;/p&gt;

&lt;p&gt;—— 晗君 后记于 2019.03.09&lt;/p&gt;
</description>
        <pubDate>Fri, 08 Mar 2019 16:35:00 +0800</pubDate>
        <link>http://localhost:4000/2019/03/08/hello-blog/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/03/08/hello-blog/</guid>
        
        <category>生活</category>
        
        
      </item>
    
  </channel>
</rss>
